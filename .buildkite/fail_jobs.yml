#@ load("@ytt:data", "data")
#@ if data.values.arch == "aarch64":
#@    ROOTFS_TREEHASH = "12f78298dfda0c0749e0c07fbcac2db3ecde0ef6"
#@ elif data.values.arch == "x86_64":
#@    ROOTFS_TREEHASH = "2c01dab897da407467613f0ebd57883b228f3cf1"
#@ end

self_test_setup: &self_test_setup
  post-checkout: |
    mkdir -p .buildkite/plugins/jack
    cp -Ra hooks lib plugin.yml README.md .buildkite/plugins/jack/

steps:
  - group: #@ ":{}: :boom: Failing jobs".format(data.values.os)
    steps:
      - label: ":boom: Non-existent JLL"
        soft_fail:
            - exit_status: 1

        agents:
          arch: #@ data.values.arch
          os: #@ data.values.os
          #@ if data.values.os == "linux":
          sandbox_capable: true
          #@ end
          queue: "juliaecosystem"

        plugins:
          - JuliaCI/julia#v1:
              version: 1

          - staticfloat/metahook#sf/windows_backslashes:
              <<: *self_test_setup

          #@ if data.values.os == "linux":
          - staticfloat/sandbox#v1:
              rootfs_url: #@ "https://github.com/JuliaCI/rootfs-images/releases/download/v5.52/debian_minimal.{}.tar.gz".format(data.values.arch)
              rootfs_treehash: #@ ROOTFS_TREEHASH 
              verbose: true
              workspaces:
                #! Include `/cache` so that `julia` install can properly cache its Julia downloads
                - "/cache:/cache"
                #! Include `~/.ssh` so that we get the pre-filled `known_hosts` file
                - "$${HOME}/.ssh:/root/.ssh"
          #@ end

          - "./.buildkite/plugins/jack":
              install:
                - "make_jll" #! this is always bound to fail since make's JLL is named GNUMake_jll

        commands: |
          set -e
          exit 2

      - label: ":boom: Non-existent JLL Version"
        soft_fail:
            - exit_status: 1

        agents:
          arch: #@ data.values.arch
          os: #@ data.values.os
          #@ if data.values.os == "linux":
          sandbox_capable: true
          #@ end
          queue: "juliaecosystem"

        plugins:
          - staticfloat/metahook#sf/windows_backslashes:
              <<: *self_test_setup
          - JuliaCI/julia#v1:
              version: 1
          
          #@ if data.values.os == "linux":
          - staticfloat/sandbox#v1:
              rootfs_url: #@ "https://github.com/JuliaCI/rootfs-images/releases/download/v5.52/debian_minimal.{}.tar.gz".format(data.values.arch)
              rootfs_treehash: #@ ROOTFS_TREEHASH 
              verbose: true
              workspaces:
                #! Include `/cache` so that `julia` install can properly cache its Julia downloads
                - "/cache:/cache"
                #! Include `~/.ssh` so that we get the pre-filled `known_hosts` file
                - "$${HOME}/.ssh:/root/.ssh"
          #@ end

          - "./.buildkite/plugins/jack":
              install:
                - name: "FFMPEG_jll" 
                  version: "4.3.2" #! FFMPEG_jll has v4.3.1 followed by v4.4.0.

        commands: |
          set -e
          exit 2

      - label: ":boom: JLL Version Conflicts"
        soft_fail:
            - exit_status: 1

        agents:
          arch: #@ data.values.arch
          os: #@ data.values.os
          #@ if data.values.os == "linux":
          sandbox_capable: true
          #@ end
          queue: "juliaecosystem"

        plugins:
          - staticfloat/metahook#sf/windows_backslashes:
              <<: *self_test_setup
          - JuliaCI/julia#v1:
              version: 1

          #@ if data.values.os == "linux":
          - staticfloat/sandbox#v1:
              rootfs_url: #@ "https://github.com/JuliaCI/rootfs-images/releases/download/v5.52/debian_minimal.{}.tar.gz".format(data.values.arch)
              rootfs_treehash: #@ ROOTFS_TREEHASH
              verbose: true
              workspaces:
                #! Include `/cache` so that `julia` install can properly cache its Julia downloads
                - "/cache:/cache"
                #! Include `~/.ssh` so that we get the pre-filled `known_hosts` file
                - "$${HOME}/.ssh:/root/.ssh"
          #@ end

          - "./.buildkite/plugins/jack":
              install:
                - name: "FFMPEG_jll" 
                  version: "4.4.2" #! FFMPEG_jll v4.4.2's compat expects libass_jll="0.15.1".
                - name: "libass_jll"
                  version: "0.14.0"

        commands: |
          set -e
          exit 2
