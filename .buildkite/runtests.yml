#@ load("@ytt:data", "data")
#@ if data.values.arch == "aarch64":
#@    ROOTFS_TREEHASH = "12f78298dfda0c0749e0c07fbcac2db3ecde0ef6"
#@ elif data.values.arch == "x86_64":
#@    ROOTFS_TREEHASH = "2c01dab897da407467613f0ebd57883b228f3cf1"
#@ end

self_test_setup: &self_test_setup
  post-checkout: |
    mkdir -p .buildkite/plugins/jack
    cp -Ra hooks lib plugin.yml README.md .buildkite/plugins/jack/

steps:
  - label: #@ ":{}: :bucket: Test jack (julia {})".format(data.values.os, data.values.julia_version)
    agents:
      arch: #@ data.values.arch
      os: #@ data.values.os
      #@ if data.values.os == "linux":
      sandbox_capable: true
      #@ end
      queue: "juliaecosystem"

    plugins:
      - JuliaCI/julia#v1:
          version: #@ data.values.julia_version

      #! In order to properly use the current repository as a plugin within a pipeline,
      #! we have to first install it into the "vendored plugin" location.
      - staticfloat/metahook#sf/windows_backslashes:
          <<: *self_test_setup

      #@ if data.values.os == "linux":
      - staticfloat/sandbox#v2:
          rootfs_url: #@ "https://github.com/JuliaCI/rootfs-images/releases/download/v5.52/debian_minimal.{}.tar.gz".format(data.values.arch)
          rootfs_treehash: #@ ROOTFS_TREEHASH 
          verbose: true
          workspaces:
            #! Include `/cache` so that `julia` install can properly cache its Julia downloads
            - "/cache:/cache"
            #! Include `~/.ssh` so that we get the pre-filled `known_hosts` file
            - "$${HOME}/.ssh:/root/.ssh"
      #@ end

      - "./.buildkite/plugins/jack":
          install:
            #! Install a precise version of `make_jll`
            #! - "make_jll#v1.0.0+0"
            #! Just grab the latest version of FFMPEG_jll that we can find
            #! Install a specific version of GCC_jll from a fork
            - "FFMPEG_jll"
            - name: "GNUMake_jll"
              version: "v4.4.0+0"
            - name: "XZ_jll"
              version: "v5.4.3+1"
              subprefix: "xz"

    commands: |
      set -eou pipefail
      ffmpeg -version
      make --version

      # Test that `XZ_jll` is in its correct place
      DEPLOY_PATH=$$(dirname $$(dirname $$(which ffmpeg)))
      EXE=""
      if [[ "$${BUILDKITE_AGENT_META_DATA_OS}" == "windows" ]]; then
        EXE=".exe"
      fi
      $${DEPLOY_PATH}/xz/bin/xz$${EXE} --version
